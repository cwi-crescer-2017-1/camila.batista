CREATE TABLE PESSOA (
  IDPessoa INTEGER NOT NULL,
  Nome VARCHAR2(30) NOT NULL,
    CONSTRAINT PK_Pessoa PRIMARY KEY(IDPessoa)
);

CREATE SEQUENCE SQPessoa; --Semelhante ao autoincremento do sqlserver

INSERT INTO Pessoa (IDPessoa, Nome) VALUES (SQPessoa.NEXTVAL, 'Alguem');

COMMIT;


--EXERCICIO 1

SELECT PRODUTO.IDPRODUTO, PRODUTO.NOME FROM PRODUTO 
  WHERE PRODUTO.IDPRODUTO NOT IN 
  (
    SELECT PEDIDO.IDPEDIDO FROM PEDIDOITEM 
    INNER JOIN PEDIDO ON PEDIDO.IDPEDIDO = PEDIDOITEM.IDPEDIDO 
    WHERE PEDIDO.DATAPEDIDO >= add_months(trunc(sysdate), -4)
  );
  
  
CREATE OR REPLACE VIEW vwUltimosProdutos AS 
    SELECT PEDIDOITEM.IDPRODUTO, COUNT(DISTINCT PEDIDOITEM.IDPRODUTO) FROM PEDIDOITEM 
    INNER JOIN PEDIDO ON PEDIDO.IDPEDIDO = PEDIDOITEM.IDPEDIDO 
    WHERE PEDIDO.DATAPEDIDO >= add_months(trunc(sysdate), -4)
    GROUP BY PEDIDOITEM.IDPRODUTO;


--------- EXERCICIO 2
CREATE OR REPLACE VIEW vwProdutosSemCompra AS 
  SELECT PRODUTO.IDPRODUTO, PRODUTO.NOME FROM PRODUTO 
    WHERE PRODUTO.IDPRODUTO NOT IN 
    (
      SELECT PEDIDO.IDPEDIDO FROM PEDIDOITEM 
      INNER JOIN PEDIDO ON PEDIDO.IDPEDIDO = PEDIDOITEM.IDPEDIDO 
      WHERE PEDIDO.DATAPEDIDO >= add_months(trunc(sysdate), -4)
    );

UPDATE PRODUTO SET SITUACAO = 'I' WHERE PRODUTO.IDPRODUTO IN (SELECT IDPRODUTO FROM vwProdutosSemCompra);

UPDATE PRODUTO SET SITUACAO = 'I' WHERE EXISTS (SELECT IDPRODUTO FROM vwProdutosSemCompra WHERE PRODUTO.IDPRODUTO = IDPRODUTO);

COMMIT;

------------ EXERCICIO 3
SELECT SUM(ped.QUANTIDADE) FROM PEDIDOITEM ped
  INNER JOIN PEDIDO pd ON pd.IDPEDIDO = ped.IDPEDIDO 
  WHERE ped.IDPRODUTO = :IDPRODUTO 
  AND pd.DATAPEDIDO >= trunc(sysdate, 'yyyy');


-----------------------------------------------------------------------------------------
SELECT * FROM user_tables;

EXEC dbms_stats.gather_schema_stats(USER);
-----------------------------------------------------------------------------------------


--------EXERCICIO 1
SELECT COUNT(IDCIDADE), NOME, UF FROM CIDADE HAVING COUNT(IDCIDADE) > 1 GROUP BY NOME, UF ORDER BY UF, NOME;

SELECT CLIENTE.NOME, CIDADE.IDCIDADE, UF, CIDADE.NOME FROM CLIENTE INNER JOIN CIDADE ON CLIENTE.IDCIDADE = CIDADE.IDCIDADE 

DECLARE
  CURSOR C_CIDADES_DUPLICADAS IS 
    SELECT CIDADE.NOME, UF
    FROM CIDADE
    HAVING COUNT(CIDADE.IDCIDADE) > 1
    GROUP BY CIDADE.NOME, UF
    ORDER BY 2, 1;
    
  CURSOR C_CLIENTES IS 
    SELECT CLIENTE.NOME AS CLIENTENOME, CIDADE.UF, CIDADE.NOME AS CIDADENOME
    FROM CLIENTE 
    INNER JOIN CIDADE ON CLIENTE.IDCIDADE = CIDADE.IDCIDADE;
BEGIN    
  FOR a IN C_CIDADES_DUPLICADAS LOOP
    FOR q IN C_CLIENTES LOOP
      IF(q.CIDADENOME = a.Nome) THEN
        DBMS_OUTPUT.PUT_LINE( a.UF || '-'|| a.NOME || '-'|| q.CLIENTENOME);
      END IF;
    END LOOP;
  END LOOP;
END;

CREATE INDEX IX_CIDADE_NOME_UF ON CIDADE (NOME, UF);
CREATE INDEX IX_CLIENTE_CIDADE ON CLIENTE (IDCIDADE);

-------EXERCICIO 2


DECLARE
  CURSOR C_PEDIDO(IDPED IN number) IS
    SELECT QUANTIDADE , PRECOUNITARIO  FROM PEDIDOITEM 
    where IDPED = IDPEDIDO;
  vPEDIDO PEDIDO.IDPEDIDO%TYPE;
  vValor PEDIDO.VALORPEDIDO%type;
BEGIN
  vPEDIDO := 43;
  vValor := 0.0;
  for i in C_PEDIDO(vPedido) loop
    vValor := vValor + ( i.quantidade * i.precounitario);
  end loop;
  UPDATE PEDIDO 
  SET VALORPEDIDO =  vValor
  WHERE IDPEDIDO = vPEDIDO;
END;

select * from pedido where idpedido = 43







-------------------------------------------------
CREATE OR REPLACE
PROCEDURE Atualiza_Valor_Pedido (pIDPedido IN INTEGER) AS
  vValorPedido  Pedido.ValorPedido%type;
BEGIN

   Select SUM(Quantidade * PrecoUnitario)
   into   vValorPedido
   From   PedidoItem
   Where  IDPedido = pIDPedido;
   
   Update Pedido
   Set    ValorPedido = vValorPedido
   Where  IDPedido    = pIDPedido;

END;

-----------------------------------------------------------------
CREATE OR REPLACE PACKAGE "PCK_ELIMINA_CIDADES_DUPLICADAS" AS
  PROCEDURE CLIENTES_RELACIONADOS;
  FUNCTION menorId(cNome VARCHAR2, cUF VARCHAR2) RETURN INTEGER;
END;

------------------------------------------------------------------

CREATE OR REPLACE PACKAGE BODY PCK_ELIMINA_CIDADES_DUPLICADAS AS
  FUNCTION menorId(cNome VARCHAR2, cUF VARCHAR2) RETURN INTEGER AS
    vMinimo INTEGER;
    BEGIN 
      SELECT MIN(IDCIDADE)
      INTO vMinimo
      FROM CIDADE
      WHERE NOME = cNome AND UF = cUf;
      RETURN vMinimo;
    END menorId;
  
  PROCEDURE CLIENTES_RELACIONADOS AS
    valorMinimo INTEGER;

    CURSOR C_CIDADES_DUPLICADAS IS 
      SELECT NOME, UF
      FROM CIDADE
      HAVING COUNT(IDCIDADE) > 1
      GROUP BY NOME, UF
      ORDER BY 2, 1;
    
    CURSOR C_CLIENTES(cNOME CIDADE.NOME%TYPE, cUF CIDADE.UF%TYPE) IS 
      SELECT CLIENTE.IDCLIENTE
      FROM CLIENTE 
      INNER JOIN CIDADE ON CLIENTE.IDCIDADE = CIDADE.IDCIDADE
      WHERE CIDADE.NOME = cNOME AND CIDADE.UF = cUF;
  BEGIN    

    FOR a IN C_CIDADES_DUPLICADAS LOOP
      valorMinimo := menorId(a.nome, a.uf);
      FOR q IN C_CLIENTES(a.NOME, a.UF) LOOP
        UPDATE CLIENTE 
        SET IDCIDADE = valorMinimo
        WHERE IDCIDADE != valorMinimo
        AND q.IDCLIENTE = IDCLIENTE;
        
      END LOOP;
      
      DELETE FROM CIDADE
      WHERE IDCIDADE != valorMinimo
      AND a.nome = CIDADE.NOME 
      AND a.uf = CIDADE.UF;
      
    END LOOP;
  END;
END PCK_ELIMINA_CIDADES_DUPLICADAS;  


BEGIN
  PCK_ELIMINA_CIDADES_DUPLICADAS.CLIENTES_RELACIONADOS;
END;

select * from cidade order by nome;